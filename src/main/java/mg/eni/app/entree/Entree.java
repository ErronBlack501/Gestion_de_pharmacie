/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mg.eni.app.entree;

import com.eni.gestion_de_pharmacie.MainMenu;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author erb
 */
public class Entree extends javax.swing.JFrame {
    static String dateEntree;
    static String medocNumStatic;
    static String numEntree;
    static int stockEntree;
    static Connection con;
    static PreparedStatement pst;
    static ResultSet rs;
    private int stockApresSuppression = 0;
    Connection connection;
    PreparedStatement prst;
    ResultSet result;
    
    public static void staticTableauActualisation() throws SQLException {
        try {
            
            Class.forName("org.postgresql.Driver");
            con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/gestion_pharmacie", "postgres", "administrator");
            
            pst = con.prepareStatement("SELECT e.\"numEntree\", md.design, e.\"stockEntree\", e.\"dateEntree\" FROM gp.\"ENTREE\" e JOIN gp.\"MEDICAMENT\" md ON md.\"numMedoc\" = e.\"medocNum\" ORDER BY e.\"numEntree\" ASC LIMIT 50");
            rs = pst.executeQuery();
            
            entreeTable.setModel(new DefaultTableModel(
                new Object [][] {
                    },
                    new String [] {
                        "numEntrée", "medocDesign", "Stock entrée", "Date d'entrée"
                    }
            )); 
            
            while (rs.next()) {
                String numEntree = rs.getString("numEntree");
                String medocNum = rs.getString("design");
                String stockEntree = String.valueOf(rs.getInt("stockEntree"));
                String dateEntree = rs.getString("dateEntree");
                String[] tabData = { numEntree, medocNum, stockEntree, dateEntree };
                DefaultTableModel tabModel = (DefaultTableModel) entreeTable.getModel();
                tabModel.addRow(tabData);
            }    
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            con.close();
        }       
    }
    
    public void connect(){
        try {
            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/gestion_pharmacie", "postgres", "administrator");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void deconnect() {
        try {
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void tableauActualisation() {
        try {
            
            prst = connection.prepareStatement("SELECT e.\"numEntree\", md.\"design\", e.\"stockEntree\", e.\"dateEntree\" FROM gp.\"ENTREE\" e JOIN gp.\"MEDICAMENT\" md ON md.\"numMedoc\" = e.\"medocNum\" ORDER BY e.\"numEntree\" ASC LIMIT 50");
            result = prst.executeQuery();
            entreeTable.setModel(new DefaultTableModel(
                    new Object [][] {
                    },
                    new String [] {
                        "numEntree", "medocDesign", "Stock entrée", "Date d'entrée"
                    }
            )); 
            
            while (result.next()) {
                String numEntree = result.getString("numEntree");
                String design = result.getString("design");
                String stockEntree = String.valueOf(result.getInt("stockEntree"));
                String dateEntree = result.getString("dateEntree");
                
                String[] tabData = { numEntree, design, stockEntree, dateEntree};
                
                DefaultTableModel tabModel = (DefaultTableModel) entreeTable.getModel();
                tabModel.addRow(tabData);            
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Creates new form Medicament
     * @throws SQLException
     */
    public Entree() throws SQLException {
        initComponents();
        staticTableauActualisation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        entreeTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        rechercheField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Cantarell", 3, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Liste des entrées :");

        jButton4.setText("Retour");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        entreeTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "numEntrée", "medocDesign", "Stock entrée", "Date d'entrée"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        entreeTable.setShowGrid(true);
        jScrollPane1.setViewportView(entreeTable);

        jButton1.setText("Ajouter");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Supprimer");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Modifier");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Actualiser");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setText("Rechercher :");
        jButton6.setHideActionText(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 677, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButton2)
                        .addGap(38, 38, 38)
                        .addComponent(jButton5)
                        .addGap(159, 159, 159))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rechercheField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(rechercheField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:

        Entree.super.dispose();
        MainMenu mm = null;
        try {
            mm = new MainMenu();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Entree.class.getName()).log(Level.SEVERE, null, ex);
        }
        mm.setLocationRelativeTo(null);
        mm.setVisible(true);
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AjouterEntree newEntree = new AjouterEntree(this, true);
        newEntree.setLocationRelativeTo(this);
        newEntree.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        int selectedRow = entreeTable.getSelectedRow();
        String numEntreeSelectedRow = (String) entreeTable.getValueAt(selectedRow, 0);
        String designMedoc = (String) entreeTable.getValueAt(selectedRow, 1);
        //int stockEntree = Integer.parseInt((String)entreeTable.getValueAt(selectedRow, 2));
        System.out.println(numEntreeSelectedRow);

        try {

            if (entreeTable.isRowSelected(selectedRow))
            {
                int response = JOptionPane.showInternalConfirmDialog(null, "Êtes-vous sûr de vouloir supprimer cette entrée?", "SUPPRESSION D'ENTREE", 0);

                if (response == 0)
                {
                    stockApresSuppression(selectedRow);
                    System.out.println(stockApresSuppression);
                    if (stockApresSuppression >= 0)
                    {
                        try {
                            connect();
                            PreparedStatement pr = connection.prepareStatement("UPDATE gp.\"MEDICAMENT\" SET stock = ? WHERE design = ?");
                            pr.setInt(1, stockApresSuppression);
                            pr.setString(2, designMedoc);
                            pr.executeUpdate();
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                            deconnect();
                        }
                        connect();
                        prst = connection.prepareStatement("DELETE FROM gp.\"ENTREE\" WHERE \"numEntree\" = CAST(? AS ulid)");
                        prst.setString(1, numEntreeSelectedRow);
                        prst.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Suppression de l'entrée reussie!", "SUPPRESSION D'ENTREE", 1);
                        tableauActualisation();
                    }
                    else {
                        JOptionPane.showMessageDialog(this, "!!Si vous supprimez cette entrée alors le stock de ce médicament dans la table MEDICAMENT deviendra négatif!!", "SUPPRESSION REFUSÉE", 1);
                    }
                }
            }
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            deconnect();
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void stockApresSuppression(int selectedRow)
    {
        try {
            connect();
            String designMedoc = (String) entreeTable.getValueAt(selectedRow, 1);
            String numEntreeSelected = (String) entreeTable.getValueAt(selectedRow, 0);
            
            prst = connection.prepareStatement("SELECT \"numMedoc\" FROM gp.\"MEDICAMENT\" WHERE design = ?");
            prst.setString(1, designMedoc);
            result = prst.executeQuery();
            
            while (result.next()) {                    
                medocNumStatic = result.getString("numMedoc");
            }
            
            PreparedStatement pr = connection.prepareStatement("SELECT (COALESCE((SELECT SUM(\"stockEntree\") FROM gp.\"ENTREE\" WHERE \"medocNum\" = CAST(? AS ulid) AND \"numEntree\" != CAST(? AS ulid)), 0)"
            + " - COALESCE((SELECT SUM(nbr) FROM gp.\"ACHAT\" WHERE \"medocNum\" = CAST(? AS ulid)), 0)) AS \"stockApresSuppression\"");
            pr.setString(1, medocNumStatic);
            pr.setString(2, numEntreeSelected);
            pr.setString(3, medocNumStatic);
            ResultSet rs1 = pr.executeQuery();
           
            while (rs1.next()) {
                stockApresSuppression = rs1.getInt("stockApresSuppression");    
            }    
            System.out.println(stockApresSuppression);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            deconnect();
        }
    }
    
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (entreeTable.isRowSelected(entreeTable.getSelectedRow()))
        {
            int selectedRow = entreeTable.getSelectedRow();
            stockEntree = Integer.parseInt((String) entreeTable.getValueAt(selectedRow, 2));
            dateEntree = (String) entreeTable.getValueAt(selectedRow, 3);
            try {
                connect();
                String designMedoc = (String) entreeTable.getValueAt(selectedRow, 1);
                prst = connection.prepareStatement("SELECT \"numMedoc\" FROM gp.\"MEDICAMENT\" WHERE design = ?");
                prst.setString(1, designMedoc);
                result = prst.executeQuery();
                while (result.next()) {                    
                    medocNumStatic = result.getString("numMedoc");
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                deconnect();
            }
            numEntree = (String) entreeTable.getValueAt(selectedRow, 0);
            System.out.println(medocNumStatic);
            ModifierEntree updateEntree = new ModifierEntree(this, true);
            updateEntree.setLocationRelativeTo(this);
            updateEntree.show();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        try {
            
            connect();
            prst = connection.prepareStatement("SELECT e.\"numEntree\", md.design, e.\"stockEntree\", e.\"dateEntree\" FROM gp.\"ENTREE\" e JOIN gp.\"MEDICAMENT\" md ON md.\"numMedoc\" = e.\"medocNum\" ORDER BY e.\"numEntree\" ASC LIMIT 50");
            result = prst.executeQuery();

            entreeTable.setModel(new DefaultTableModel(
                    new Object [][] {
                    },
                    new String [] {
                        "numEntree", "medocDesign", "Stock entrée", "Date d'entrée"
                    }
            ));
            
            int i = 0;
            
            while (result.next()) {
                String numEntreeVar = result.getString("numEntree");
                String design = result.getString("design");
                String stockEntreeVar = String.valueOf(result.getInt("stockEntree"));
                String dateEntreeVar = result.getString("dateEntree");

                String[] tabData = { numEntreeVar, design, stockEntreeVar, dateEntreeVar};

                DefaultTableModel tabModel = (DefaultTableModel) entreeTable.getModel();
                tabModel.addRow(tabData);
                i++;
            }
            
            if (i == 0)
            {
                JOptionPane.showMessageDialog(this, "La table ENTREE est vide!", "TABLE VIDE", 1);
            }  
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            deconnect();
        }
    }//GEN-LAST:event_jButton5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Entree.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Entree.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Entree.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Entree.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Entree().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Entree.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable entreeTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField rechercheField;
    // End of variables declaration//GEN-END:variables
}
