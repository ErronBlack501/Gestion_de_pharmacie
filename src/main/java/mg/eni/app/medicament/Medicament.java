/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mg.eni.app.medicament;

import com.eni.gestion_de_pharmacie.MainMenu;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author erb
 */
public class Medicament extends javax.swing.JFrame {

    static String designStatic;
    static int prix_unitaire;
    static Connection con;
    static PreparedStatement pst;
    static ResultSet rs;
    Connection connection;
    PreparedStatement prst;
    ResultSet result;

    public static void staticTableauActualisation() throws SQLException {
        try {
            Class.forName("org.postgresql.Driver");
            con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/gestion_pharmacie", "postgres", "administrator");

            pst = con.prepareStatement("SELECT * FROM gp.\"MEDICAMENT\" ORDER BY \"numMedoc\" ASC LIMIT 50");
            rs = pst.executeQuery();
            medicamentTable.setModel(new DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "numMedoc", "Design", "Prix unitaire", "Stock"
                    }
            ));

            while (rs.next()) {
                String numMedoc = rs.getString("numMedoc");
                String design = rs.getString("design");
                String prixUnitaire = String.valueOf(rs.getInt("prix_unitaire"));
                String stock = String.valueOf(rs.getInt("stock"));
                String[] tabData = {numMedoc, design, prixUnitaire, stock};
                DefaultTableModel tabModel = (DefaultTableModel) medicamentTable.getModel();
                tabModel.addRow(tabData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            con.close();
        }
    }

    private void tableauActualisation() {
        try {

            prst = connection.prepareStatement("SELECT * FROM gp.\"MEDICAMENT\" ORDER BY \"numMedoc\" ASC LIMIT 50");
            result = prst.executeQuery();
            medicamentTable.setModel(new DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "numMedoc", "Design", "Prix unitaire", "Stock"
                    }
            ));

            while (result.next()) {
                String numMedoc = result.getString("numMedoc");
                String design = result.getString("design");
                String prixUnitaire = String.valueOf(result.getInt("prix_unitaire"));
                String stock = String.valueOf(result.getInt("stock"));

                String[] tabData = {numMedoc, design, prixUnitaire, stock};

                DefaultTableModel tabModel = (DefaultTableModel) medicamentTable.getModel();
                tabModel.addRow(tabData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void connect() {
        try {
            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/gestion_pharmacie", "postgres", "administrator");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deconnect() {
        try {
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Creates new form Medicament
     *
     * @throws SQLException
     */
    public Medicament() throws SQLException {
        initComponents();
        filtresComboBox.addItem("Aucun");
        filtresComboBox.addItem("Les médicaments en rupture de stock");
        filtresComboBox.addItem("Les 05 médicaments les plus vendus");
        staticTableauActualisation();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicamentTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        rechercherButton = new javax.swing.JButton();
        rechercheField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        filtresComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Cantarell", 3, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Liste des medicaments :");

        jButton4.setText("Retour");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        medicamentTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "numMedoc", "Design", "Prix unitaire", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        medicamentTable.setShowGrid(true);
        jScrollPane1.setViewportView(medicamentTable);

        jButton1.setText("Ajouter");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Supprimer");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Modifier");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Actualiser");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        rechercherButton.setText("Rechercher :");
        rechercherButton.setHideActionText(true);
        rechercherButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rechercherButtonMouseClicked(evt);
            }
        });

        jLabel1.setText("Filtres :");

        filtresComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filtresComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 673, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButton2)
                        .addGap(38, 38, 38)
                        .addComponent(jButton5)
                        .addGap(159, 159, 159))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(rechercherButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rechercheField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rechercherButton)
                    .addComponent(rechercheField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(filtresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        Medicament.super.dispose();
        MainMenu mm = null;
        try {
            mm = new MainMenu();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Medicament.class.getName()).log(Level.SEVERE, null, ex);
        }
        mm.setLocationRelativeTo(null);
        mm.setVisible(true);
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AjouterMedicament newMed = new AjouterMedicament(this, true);
        newMed.setLocationRelativeTo(this);
        newMed.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        try {
            connect();
            prst = connection.prepareStatement("SELECT * FROM gp.\"MEDICAMENT\" ORDER BY \"numMedoc\" ASC LIMIT 50");
            result = prst.executeQuery();
            medicamentTable.setModel(new DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "numMedoc", "Design", "Prix unitaire", "Stock"
                    }
            ));
            int i = 0;
            while (result.next()) {
                String numMedoc = result.getString("numMedoc");
                String design = result.getString("design");
                String prixUnitaire = String.valueOf(result.getInt("prix_unitaire"));
                String stock = String.valueOf(result.getInt("stock"));

                String[] tabData = {numMedoc, design, prixUnitaire, stock};

                DefaultTableModel tabModel = (DefaultTableModel) medicamentTable.getModel();
                tabModel.addRow(tabData);
            }
            if (i == 0) {
                JOptionPane.showMessageDialog(this, "La table MEDICAMENT est vide!", "TABLE VIDE", 1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            deconnect();
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        int selectedRow = medicamentTable.getSelectedRow();
        String designSelectedRow = (String) medicamentTable.getValueAt(selectedRow, 1);
        System.out.println(designSelectedRow);

        try {

            if (medicamentTable.isRowSelected(selectedRow)) {
                connect();
                prst = connection.prepareStatement("DELETE FROM gp.\"MEDICAMENT\" WHERE design = ?");
                prst.setString(1, designSelectedRow);

                int response = JOptionPane.showInternalConfirmDialog(null, "Êtes-vous sûr de vouloir supprimer ce Medicament?", "SUPPRESSION DE MEDICAMENT", 0);

                if (response == 0) {
                    prst.executeUpdate();
                    tableauActualisation();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            deconnect();
        }

    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (medicamentTable.isRowSelected(medicamentTable.getSelectedRow())) {
            int selectedRow = medicamentTable.getSelectedRow();
            System.out.println(medicamentTable.getValueAt(selectedRow, 0));
            prix_unitaire = Integer.parseInt((String) medicamentTable.getValueAt(selectedRow, 2));
            designStatic = (String) medicamentTable.getValueAt(selectedRow, 1);
            ModifierMedicament updateMed = new ModifierMedicament(this, true);
            updateMed.setLocationRelativeTo(this);
            updateMed.show();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void filtresComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtresComboBoxItemStateChanged
        // TODO add your handling code here:
        String itemSelected = (String) filtresComboBox.getSelectedItem();

        switch (itemSelected) {
            case "Aucun": {
                try {
                    staticTableauActualisation();
                } catch (SQLException ex) {
                    Logger.getLogger(Medicament.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            case "Les médicaments en rupture de stock": {
                try {
                    connect();
                    prst = connection.prepareStatement("SELECT * FROM gp.\"MEDICAMENT\" WHERE stock < 5 ORDER BY \"numMedoc\" ASC LIMIT 50");
                    result = prst.executeQuery();
                    medicamentTable.setModel(new DefaultTableModel(
                            new Object[][]{},
                            new String[]{
                                "numMedoc", "Design", "Prix unitaire", "Stock"
                            }
                    ));

                    while (result.next()) {
                        String numMedoc = result.getString("numMedoc");
                        String design = result.getString("design");
                        String prixUnitaire = String.valueOf(result.getInt("prix_unitaire"));
                        String stock = String.valueOf(result.getInt("stock"));
                        String[] tabData = {numMedoc, design, prixUnitaire, stock};

                        DefaultTableModel tabModel = (DefaultTableModel) medicamentTable.getModel();
                        tabModel.addRow(tabData);
                    }

                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                } finally {
                    deconnect();
                }
            }
            break;
            case "Les 05 médicaments les plus vendus": {
                try {
                    connect();
                    prst = connection.prepareStatement("SELECT m.*, SUM(a.nbr) AS total_vendu FROM gp.\"MEDICAMENT\" m JOIN gp.\"ACHAT\" a ON a.\"medocNum\" = m.\"numMedoc\" GROUP BY m.\"numMedoc\", m.design, m.prix_unitaire ORDER BY total_vendu DESC LIMIT 5");
                    result = prst.executeQuery();
                    medicamentTable.setModel(new DefaultTableModel(
                            new Object[][]{},
                            new String[]{
                                "numMedoc", "Design", "Prix unitaire", "Stock", "Total vendu"
                            }
                    ));

                    while (result.next()) {
                        String numMedoc = result.getString("numMedoc");
                        String design = result.getString("design");
                        String prixUnitaire = String.valueOf(result.getInt("prix_unitaire"));
                        String stock = String.valueOf(result.getInt("stock"));
                        String totalVendu = String.valueOf(result.getInt("total_vendu"));
                        String[] tabData = {numMedoc, design, prixUnitaire, stock, totalVendu};

                        DefaultTableModel tabModel = (DefaultTableModel) medicamentTable.getModel();
                        tabModel.addRow(tabData);
                    }

                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                } finally {
                    deconnect();
                }
            }
            break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_filtresComboBoxItemStateChanged

    private void rechercherButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rechercherButtonMouseClicked
        try {
            // TODO add your handling code here:
            if (!rechercheField.getText().isEmpty()) {
                connect();
                prst = connection.prepareStatement("SELECT * FROM gp.\"MEDICAMENT\" WHERE design LIKE ?");
                prst.setString(1, "%" + rechercheField.getText() + "%");
                result = prst.executeQuery();
                medicamentTable.setModel(new DefaultTableModel(
                        new Object[][]{},
                        new String[]{
                            "numMedoc", "Design", "Prix unitaire", "Stock"
                        }
                ));
                while (result.next()) {
                    String numMedoc = result.getString("numMedoc");
                    String design = result.getString("design");
                    String prixUnitaire = String.valueOf(result.getInt("prix_unitaire"));
                    String stock = String.valueOf(result.getInt("stock"));
                    String[] tabData = {numMedoc, design, prixUnitaire, stock};

                    DefaultTableModel tabModel = (DefaultTableModel) medicamentTable.getModel();
                    tabModel.addRow(tabData);
                }
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (!rechercheField.getText().isEmpty()) {
                deconnect();
            }
        }
    }//GEN-LAST:event_rechercherButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Medicament.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Medicament().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Medicament.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> filtresComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable medicamentTable;
    private javax.swing.JTextField rechercheField;
    private javax.swing.JButton rechercherButton;
    // End of variables declaration//GEN-END:variables

}
